-# encoding: UTF-8
-#
-# Copyright Alexander E. Fischer <aef@raxys.net>, 2011
-#
-# This file is part of Lilith.
-#
-# Lilith is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
-#
-# Lilith is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with Lilith.  If not, see <http://www.gnu.org/licenses/>.
- set_body_id :schedules
%h2= t('schedules.schedule_composition')

- form_for(@schedule) do |f|
  .controls{:class => current_user ? nil : :reduced}
    .options
      %p
        %label{:for => 'fixed_schedule_state_id'}= t('schedules.actuality') + ':'
        = f.select :fixed_schedule_state_id, options_for_select([[t('schedules.latest'), 'latest']] + @schedule_states.map{|schedule| [l(schedule.created_at), schedule.id]})
        = f.submit t('schedules.generate'), :name => nil

    -# Generate navigation index
    .navigation
      %table
        %caption= t('schedules.navigation')
        %tbody
          - @study_units.group_by(&:program).each do |program, study_units|
            %tr
              %td.program= program
              %td.units
                - study_units.each do |study_unit|
                  - if study_unit.position
                    %a{:href => "##{URI.escape(study_unit.name.gsub(/ /, '+'))}"}= study_unit.position
                  - else
                    %a{:href => "##{URI.escape(study_unit.name.gsub(/ /, '+'))}"} ❂

    .clear

  - content_for(:filter) do # Inserted through JavaScript
    .filters
      %label{:for => 'course_filter'}= t('schedules.filter') + ':'
      .value
        %img.spinner{:src => '/images/spinner.gif', :alt => 'Loading...'}
        %input#course_filter{:type => 'text'}
        %img#course_filter_clear{:src => '/images/icons/cross.png', :alt => 'Clear'}

  %p
    %noscript
      = t('global.java_script_features')

  -# Generate sections
  .study_units
    - @study_units.each do |study_unit|
      = render :partial => 'study_unit', :locals => {:study_unit => study_unit, :f => f}

:javascript
  // Add course filter bar
  $('#schedules .controls').append("#{escape_javascript yield(:filter)}");

  var course_filter_timer;
  var course_filter_value = '';

  $(function() {
    // Course selection toggle
    $('#schedules .groups label').click(function() {
      var label = $(this);
      var check_box = label.children('input[type=checkbox]');

      if (check_box.is(':checked')) {
        label.addClass('selected');
      } else {
        label.removeClass('selected');
      }
    });

    // Hide all courses which do not match the given regular expression
    // If all courses are hidden in a study unit, the whole unit becomes hidden
    var course_filter_action = function() {

      var pattern = new RegExp($('#course_filter').val(), 'i');

      $('#schedules .study_unit').each(function() {
        var shown_count = 0;

        $(this).find('.courses > li').each(function() {
          if ($(this).find('h4').text().match(pattern)) {
            $(this).show();
            shown_count += 1;
          } else {
            $(this).hide();
          }
        });

        if (shown_count == 0) {
          $(this).hide();
        } else {
          $(this).show();
        }
      });

      course_filter_value = $('#course_filter').val();

      if ($('#course_filter').val() != '') {
        $('#schedules #course_filter_clear').css('visibility', 'visible');
      } else {
        $('#schedules #course_filter_clear').css('visibility', 'hidden');
      }

      $('#schedules .spinner').css('visibility', 'hidden');
    };

    // Amount of milliseconds for the finish-typing-timeout
    var course_filter_timeout = 500;

    // When a key is released, a timeout for filtering is activated
    $('#schedules #course_filter').keyup(function() {
      if (course_filter_value != $('#course_filter').val()) {
        course_filter_timer = setTimeout(course_filter_action, course_filter_timeout);
        $('#schedules .spinner').css('visibility', 'visible');
      }
    });

    // When a key is pressed, a running timeout for filtering gets stopped
    $('#schedules #course_filter').keydown(function() {
      clearTimeout(course_filter_timer);
      $('#schedules .spinner').css('visibility', 'hidden');
    });

    $('#schedules #course_filter_clear').click(function() {
      $(this).css('visibility', 'hidden');
      $('#schedules #course_filter').val('');
      course_filter_action();
    });
  });
